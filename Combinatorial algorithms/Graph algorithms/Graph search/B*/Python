import heapq

class Node:
    def __init__(self, state, parent=None, g_cost=0, h_cost=0):
        self.state = state
        self.parent = parent
        self.g_cost = g_cost
        self.h_cost = h_cost

    def __lt__(self, other):
        return self.g_cost + max(self.h_cost, other.h_cost) < other.g_cost + max(self.h_cost, other.h_cost)

def calculate_heuristic(current, goal):
    # Calculate the heuristic cost (e.g., Euclidean distance)
    return abs(current[0] - goal[0]) + abs(current[1] - goal[1])

def b_star(start, goal, graph):
    open_list = []
    closed_set = set()

    # Create the start node
    start_node = Node(start)
    start_node.h_cost = calculate_heuristic(start, goal)

    # Add the start node to the open list
    heapq.heappush(open_list, start_node)

    while open_list:
        # Get the node with the lowest f-cost from the open list
        current_node = heapq.heappop(open_list)

        # Check if the goal is reached
        if current_node.state == goal:
            path = []
            while current_node:
                path.append(current_node.state)
                current_node = current_node.parent
            return path[::-1]

        # Add the current node to the closed set
        closed_set.add(current_node.state)

        # Explore the neighbors
        for neighbor in graph[current_node.state]:
            if neighbor not in closed_set:
                g_cost = current_node.g_cost + graph[current_node.state][neighbor]
                h_cost = calculate_heuristic(neighbor, goal)
                new_node = Node(neighbor, current_node, g_cost, h_cost)
                heapq.heappush(open_list, new_node)

    return None

# Define the graph as a dictionary of dictionaries
graph = {
    'A': {'B': 1, 'C': 3},
    'B': {'A': 1, 'C': 1, 'D': 3},
    'C': {'A': 3, 'B': 1, 'D': 1, 'E': 2},
    'D': {'B': 3, 'C': 1, 'E': 1, 'F': 4},
    'E': {'C': 2, 'D': 1, 'F': 2},
    'F': {'D': 4, 'E': 2}
}

# Set the start and goal nodes
start_node = 'A'
goal_node = 'F'

# Find the shortest path using B*
path = b_star(start_node, goal_node, graph)

# Print the path
if path:
    print("Shortest path:", ' -> '.join(path))
else:
    print("Path not found.")
