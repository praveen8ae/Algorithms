import networkx as nx
import matplotlib.pyplot as plt
import numpy as np

def spectral_layout(graph, dimensions=2):
    adjacency_matrix = nx.adjacency_matrix(graph)
    laplacian_matrix = nx.laplacian_matrix(graph)

    # Calculate the eigenvectors corresponding to the smallest non-zero eigenvalues
    _, eigenvectors = np.linalg.eigh(laplacian_matrix.toarray())

    # Take the eigenvectors corresponding to the desired dimensions
    embedding = eigenvectors[:, 1:dimensions+1]

    # Scale and normalize the embedding
    scale = np.max(np.abs(embedding))
    embedding = embedding / scale

    return {node: embedding[node] for node in graph.nodes()}

# Create a graph
graph = nx.Graph()
graph.add_edges_from([(1, 2), (1, 3), (1, 4), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1)])

# Apply spectral layout with 2 dimensions
pos = spectral_layout(graph, dimensions=2)

# Draw the graph
nx.draw(graph, pos, with_labels=True, node_color='lightblue', node_size=500, edge_color='gray')
plt.show()
