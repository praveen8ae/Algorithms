import networkx as nx
import matplotlib.pyplot as plt

def fruchterman_reingold_layout(graph, iterations=50, k=0.1, scale=1.0):
    # Initialize node positions randomly
    pos = nx.spring_layout(graph, scale=scale)

    # Calculate attractive and repulsive forces between nodes
    for _ in range(iterations):
        displacement = {node: [0, 0] for node in graph.nodes()}

        for u, v in graph.edges():
            delta = pos[u] - pos[v]
            distance = max(0.01, np.linalg.norm(delta))
            force = (k * k) / distance
            displacement[u] += delta / distance * force
            displacement[v] -= delta / distance * force

        for node in graph.nodes():
            displacement[node] += np.random.uniform(-0.5, 0.5, 2)  # Add random displacement

        # Update node positions
        for node in graph.nodes():
            pos[node] += displacement[node]

    return pos

# Create a graph
graph = nx.Graph()
graph.add_edges_from([(1, 2), (1, 3), (1, 4), (2, 3), (3, 4), (4, 5), (5, 6), (6, 1)])

# Apply Fruchterman-Reingold layout
pos = fruchterman_reingold_layout(graph)

# Draw the graph
nx.draw(graph, pos, with_labels=True, node_color='lightblue', node_size=500, edge_color='gray')
plt.show()
