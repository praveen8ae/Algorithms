import multiprocessing

class Graph:
    def __init__(self, vertices):
        self.vertices = vertices
        self.adj_list = [[] for _ in range(vertices)]

    def add_edge(self, u, v):
        self.adj_list[u].append(v)
        self.adj_list[v].append(u)

def greedy_coloring(graph, vertex):
    colors = [-1] * graph.vertices
    used_colors = set()

    for neighbor in graph.adj_list[vertex]:
        if colors[neighbor] != -1:
            used_colors.add(colors[neighbor])

    for color in range(graph.vertices):
        if color not in used_colors:
            return color

def parallel_graph_coloring(graph):
    pool = multiprocessing.Pool()
    results = pool.map(lambda v: greedy_coloring(graph, v), range(graph.vertices))
    pool.close()
    pool.join()

    return results

# Create a graph
graph = Graph(5)
graph.add_edge(0, 1)
graph.add_edge(0, 2)
graph.add_edge(1, 2)
graph.add_edge(2, 3)
graph.add_edge(3, 4)

# Perform parallel graph coloring
colors = parallel_graph_coloring(graph)

# Print the assigned colors for each vertex
for vertex, color in enumerate(colors):
    print(f"Vertex {vertex} -> Color {color}")
